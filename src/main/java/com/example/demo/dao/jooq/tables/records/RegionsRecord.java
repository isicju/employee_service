/*
 * This file is generated by jOOQ.
 */
package com.example.demo.dao.jooq.tables.records;


import com.example.demo.dao.jooq.tables.Regions;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RegionsRecord extends UpdatableRecordImpl<RegionsRecord> implements Record2<UInteger, String> {

    private static final long serialVersionUID = -71972070;

    /**
     * Setter for <code>hr.regions.region_id</code>.
     */
    public void setRegionId(UInteger value) {
        set(0, value);
    }

    /**
     * Getter for <code>hr.regions.region_id</code>.
     */
    public UInteger getRegionId() {
        return (UInteger) get(0);
    }

    /**
     * Setter for <code>hr.regions.region_name</code>.
     */
    public void setRegionName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>hr.regions.region_name</code>.
     */
    public String getRegionName() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UInteger> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<UInteger, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<UInteger, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<UInteger> field1() {
        return Regions.REGIONS.REGION_ID;
    }

    @Override
    public Field<String> field2() {
        return Regions.REGIONS.REGION_NAME;
    }

    @Override
    public UInteger component1() {
        return getRegionId();
    }

    @Override
    public String component2() {
        return getRegionName();
    }

    @Override
    public UInteger value1() {
        return getRegionId();
    }

    @Override
    public String value2() {
        return getRegionName();
    }

    @Override
    public RegionsRecord value1(UInteger value) {
        setRegionId(value);
        return this;
    }

    @Override
    public RegionsRecord value2(String value) {
        setRegionName(value);
        return this;
    }

    @Override
    public RegionsRecord values(UInteger value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RegionsRecord
     */
    public RegionsRecord() {
        super(Regions.REGIONS);
    }

    /**
     * Create a detached, initialised RegionsRecord
     */
    public RegionsRecord(UInteger regionId, String regionName) {
        super(Regions.REGIONS);

        set(0, regionId);
        set(1, regionName);
    }
}
