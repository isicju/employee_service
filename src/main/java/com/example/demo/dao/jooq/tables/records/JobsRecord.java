/*
 * This file is generated by jOOQ.
 */
package com.example.demo.dao.jooq.tables.records;


import com.example.demo.dao.jooq.tables.Jobs;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JobsRecord extends UpdatableRecordImpl<JobsRecord> implements Record4<String, String, Integer, Integer> {

    private static final long serialVersionUID = 689885603;

    /**
     * Setter for <code>hr.jobs.job_id</code>.
     */
    public void setJobId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>hr.jobs.job_id</code>.
     */
    public String getJobId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>hr.jobs.job_title</code>.
     */
    public void setJobTitle(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>hr.jobs.job_title</code>.
     */
    public String getJobTitle() {
        return (String) get(1);
    }

    /**
     * Setter for <code>hr.jobs.min_salary</code>.
     */
    public void setMinSalary(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>hr.jobs.min_salary</code>.
     */
    public Integer getMinSalary() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>hr.jobs.max_salary</code>.
     */
    public void setMaxSalary(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>hr.jobs.max_salary</code>.
     */
    public Integer getMaxSalary() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, String, Integer, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Jobs.JOBS.JOB_ID;
    }

    @Override
    public Field<String> field2() {
        return Jobs.JOBS.JOB_TITLE;
    }

    @Override
    public Field<Integer> field3() {
        return Jobs.JOBS.MIN_SALARY;
    }

    @Override
    public Field<Integer> field4() {
        return Jobs.JOBS.MAX_SALARY;
    }

    @Override
    public String component1() {
        return getJobId();
    }

    @Override
    public String component2() {
        return getJobTitle();
    }

    @Override
    public Integer component3() {
        return getMinSalary();
    }

    @Override
    public Integer component4() {
        return getMaxSalary();
    }

    @Override
    public String value1() {
        return getJobId();
    }

    @Override
    public String value2() {
        return getJobTitle();
    }

    @Override
    public Integer value3() {
        return getMinSalary();
    }

    @Override
    public Integer value4() {
        return getMaxSalary();
    }

    @Override
    public JobsRecord value1(String value) {
        setJobId(value);
        return this;
    }

    @Override
    public JobsRecord value2(String value) {
        setJobTitle(value);
        return this;
    }

    @Override
    public JobsRecord value3(Integer value) {
        setMinSalary(value);
        return this;
    }

    @Override
    public JobsRecord value4(Integer value) {
        setMaxSalary(value);
        return this;
    }

    @Override
    public JobsRecord values(String value1, String value2, Integer value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached JobsRecord
     */
    public JobsRecord() {
        super(Jobs.JOBS);
    }

    /**
     * Create a detached, initialised JobsRecord
     */
    public JobsRecord(String jobId, String jobTitle, Integer minSalary, Integer maxSalary) {
        super(Jobs.JOBS);

        set(0, jobId);
        set(1, jobTitle);
        set(2, minSalary);
        set(3, maxSalary);
    }
}
