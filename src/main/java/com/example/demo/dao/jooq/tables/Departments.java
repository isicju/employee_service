/*
 * This file is generated by jOOQ.
 */
package com.example.demo.dao.jooq.tables;


import com.example.demo.dao.jooq.Hr;
import com.example.demo.dao.jooq.Indexes;
import com.example.demo.dao.jooq.Keys;
import com.example.demo.dao.jooq.tables.records.DepartmentsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Departments extends TableImpl<DepartmentsRecord> {

    private static final long serialVersionUID = 274472596;

    /**
     * The reference instance of <code>hr.departments</code>
     */
    public static final Departments DEPARTMENTS = new Departments();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DepartmentsRecord> getRecordType() {
        return DepartmentsRecord.class;
    }

    /**
     * The column <code>hr.departments.department_id</code>.
     */
    public final TableField<DepartmentsRecord, UInteger> DEPARTMENT_ID = createField(DSL.name("department_id"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>hr.departments.department_name</code>.
     */
    public final TableField<DepartmentsRecord, String> DEPARTMENT_NAME = createField(DSL.name("department_name"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>hr.departments.manager_id</code>.
     */
    public final TableField<DepartmentsRecord, UInteger> MANAGER_ID = createField(DSL.name("manager_id"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * The column <code>hr.departments.location_id</code>.
     */
    public final TableField<DepartmentsRecord, UInteger> LOCATION_ID = createField(DSL.name("location_id"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * Create a <code>hr.departments</code> table reference
     */
    public Departments() {
        this(DSL.name("departments"), null);
    }

    /**
     * Create an aliased <code>hr.departments</code> table reference
     */
    public Departments(String alias) {
        this(DSL.name(alias), DEPARTMENTS);
    }

    /**
     * Create an aliased <code>hr.departments</code> table reference
     */
    public Departments(Name alias) {
        this(alias, DEPARTMENTS);
    }

    private Departments(Name alias, Table<DepartmentsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Departments(Name alias, Table<DepartmentsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Departments(Table<O> child, ForeignKey<O, DepartmentsRecord> key) {
        super(child, key, DEPARTMENTS);
    }

    @Override
    public Schema getSchema() {
        return Hr.HR;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DEPARTMENTS_LOCATION_ID);
    }

    @Override
    public UniqueKey<DepartmentsRecord> getPrimaryKey() {
        return Keys.KEY_DEPARTMENTS_PRIMARY;
    }

    @Override
    public List<UniqueKey<DepartmentsRecord>> getKeys() {
        return Arrays.<UniqueKey<DepartmentsRecord>>asList(Keys.KEY_DEPARTMENTS_PRIMARY);
    }

    @Override
    public List<ForeignKey<DepartmentsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DepartmentsRecord, ?>>asList(Keys.DEPARTMENTS_IBFK_1);
    }

    public Locations locations() {
        return new Locations(this, Keys.DEPARTMENTS_IBFK_1);
    }

    @Override
    public Departments as(String alias) {
        return new Departments(DSL.name(alias), this);
    }

    @Override
    public Departments as(Name alias) {
        return new Departments(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Departments rename(String name) {
        return new Departments(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Departments rename(Name name) {
        return new Departments(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UInteger, String, UInteger, UInteger> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
