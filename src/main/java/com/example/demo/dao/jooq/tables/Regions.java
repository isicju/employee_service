/*
 * This file is generated by jOOQ.
 */
package com.example.demo.dao.jooq.tables;


import com.example.demo.dao.jooq.Hr;
import com.example.demo.dao.jooq.Keys;
import com.example.demo.dao.jooq.tables.records.RegionsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Regions extends TableImpl<RegionsRecord> {

    private static final long serialVersionUID = 1652051244;

    /**
     * The reference instance of <code>hr.regions</code>
     */
    public static final Regions REGIONS = new Regions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RegionsRecord> getRecordType() {
        return RegionsRecord.class;
    }

    /**
     * The column <code>hr.regions.region_id</code>.
     */
    public final TableField<RegionsRecord, UInteger> REGION_ID = createField(DSL.name("region_id"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>hr.regions.region_name</code>.
     */
    public final TableField<RegionsRecord, String> REGION_NAME = createField(DSL.name("region_name"), org.jooq.impl.SQLDataType.VARCHAR(25).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>hr.regions</code> table reference
     */
    public Regions() {
        this(DSL.name("regions"), null);
    }

    /**
     * Create an aliased <code>hr.regions</code> table reference
     */
    public Regions(String alias) {
        this(DSL.name(alias), REGIONS);
    }

    /**
     * Create an aliased <code>hr.regions</code> table reference
     */
    public Regions(Name alias) {
        this(alias, REGIONS);
    }

    private Regions(Name alias, Table<RegionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Regions(Name alias, Table<RegionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Regions(Table<O> child, ForeignKey<O, RegionsRecord> key) {
        super(child, key, REGIONS);
    }

    @Override
    public Schema getSchema() {
        return Hr.HR;
    }

    @Override
    public UniqueKey<RegionsRecord> getPrimaryKey() {
        return Keys.KEY_REGIONS_PRIMARY;
    }

    @Override
    public List<UniqueKey<RegionsRecord>> getKeys() {
        return Arrays.<UniqueKey<RegionsRecord>>asList(Keys.KEY_REGIONS_PRIMARY);
    }

    @Override
    public Regions as(String alias) {
        return new Regions(DSL.name(alias), this);
    }

    @Override
    public Regions as(Name alias) {
        return new Regions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Regions rename(String name) {
        return new Regions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Regions rename(Name name) {
        return new Regions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UInteger, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
