/*
 * This file is generated by jOOQ.
 */
package com.example.demo.dao.jooq.tables;


import com.example.demo.dao.jooq.Hr;
import com.example.demo.dao.jooq.Indexes;
import com.example.demo.dao.jooq.Keys;
import com.example.demo.dao.jooq.tables.records.EmployeesRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Employees extends TableImpl<EmployeesRecord> {

    private static final long serialVersionUID = 1696762310;

    /**
     * The reference instance of <code>hr.employees</code>
     */
    public static final Employees EMPLOYEES = new Employees();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployeesRecord> getRecordType() {
        return EmployeesRecord.class;
    }

    /**
     * The column <code>hr.employees.employee_id</code>.
     */
    public final TableField<EmployeesRecord, UInteger> EMPLOYEE_ID = createField(DSL.name("employee_id"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>hr.employees.first_name</code>.
     */
    public final TableField<EmployeesRecord, String> FIRST_NAME = createField(DSL.name("first_name"), org.jooq.impl.SQLDataType.VARCHAR(20).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>hr.employees.last_name</code>.
     */
    public final TableField<EmployeesRecord, String> LAST_NAME = createField(DSL.name("last_name"), org.jooq.impl.SQLDataType.VARCHAR(25).nullable(false), this, "");

    /**
     * The column <code>hr.employees.email</code>.
     */
    public final TableField<EmployeesRecord, String> EMAIL = createField(DSL.name("email"), org.jooq.impl.SQLDataType.VARCHAR(25).nullable(false), this, "");

    /**
     * The column <code>hr.employees.phone_number</code>.
     */
    public final TableField<EmployeesRecord, String> PHONE_NUMBER = createField(DSL.name("phone_number"), org.jooq.impl.SQLDataType.VARCHAR(20).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>hr.employees.hire_date</code>.
     */
    public final TableField<EmployeesRecord, String> HIRE_DATE = createField(DSL.name("hire_date"), org.jooq.impl.SQLDataType.VARCHAR(25).nullable(false), this, "");

    /**
     * The column <code>hr.employees.job_id</code>.
     */
    public final TableField<EmployeesRecord, String> JOB_ID = createField(DSL.name("job_id"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>hr.employees.salary</code>.
     */
    public final TableField<EmployeesRecord, BigDecimal> SALARY = createField(DSL.name("salary"), org.jooq.impl.SQLDataType.DECIMAL(8, 2).nullable(false), this, "");

    /**
     * The column <code>hr.employees.commission_pct</code>.
     */
    public final TableField<EmployeesRecord, BigDecimal> COMMISSION_PCT = createField(DSL.name("commission_pct"), org.jooq.impl.SQLDataType.DECIMAL(2, 2).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>hr.employees.manager_id</code>.
     */
    public final TableField<EmployeesRecord, UInteger> MANAGER_ID = createField(DSL.name("manager_id"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * The column <code>hr.employees.department_id</code>.
     */
    public final TableField<EmployeesRecord, UInteger> DEPARTMENT_ID = createField(DSL.name("department_id"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * Create a <code>hr.employees</code> table reference
     */
    public Employees() {
        this(DSL.name("employees"), null);
    }

    /**
     * Create an aliased <code>hr.employees</code> table reference
     */
    public Employees(String alias) {
        this(DSL.name(alias), EMPLOYEES);
    }

    /**
     * Create an aliased <code>hr.employees</code> table reference
     */
    public Employees(Name alias) {
        this(alias, EMPLOYEES);
    }

    private Employees(Name alias, Table<EmployeesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Employees(Name alias, Table<EmployeesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Employees(Table<O> child, ForeignKey<O, EmployeesRecord> key) {
        super(child, key, EMPLOYEES);
    }

    @Override
    public Schema getSchema() {
        return Hr.HR;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EMPLOYEES_DEPARTMENT_ID, Indexes.EMPLOYEES_JOB_ID);
    }

    @Override
    public UniqueKey<EmployeesRecord> getPrimaryKey() {
        return Keys.KEY_EMPLOYEES_PRIMARY;
    }

    @Override
    public List<UniqueKey<EmployeesRecord>> getKeys() {
        return Arrays.<UniqueKey<EmployeesRecord>>asList(Keys.KEY_EMPLOYEES_PRIMARY);
    }

    @Override
    public List<ForeignKey<EmployeesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EmployeesRecord, ?>>asList(Keys.EMPLOYEES_IBFK_1, Keys.EMPLOYEES_IBFK_2);
    }

    public Jobs jobs() {
        return new Jobs(this, Keys.EMPLOYEES_IBFK_1);
    }

    public Departments departments() {
        return new Departments(this, Keys.EMPLOYEES_IBFK_2);
    }

    @Override
    public Employees as(String alias) {
        return new Employees(DSL.name(alias), this);
    }

    @Override
    public Employees as(Name alias) {
        return new Employees(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Employees rename(String name) {
        return new Employees(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Employees rename(Name name) {
        return new Employees(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<UInteger, String, String, String, String, String, String, BigDecimal, BigDecimal, UInteger, UInteger> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
